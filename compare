#Neural Network
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import keras 
from keras.models import Sequential
from keras.layers import Dense 
from keras.models import load_model
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import accuracy_score
from sklearn import svm
from sklearn.tree import DecisionTreeClassifier


def process(path):
	msev=[]
	maev=[]
	rsqv=[]
	rmsev=[]
	acyv=[]
	# importing the dataset
	df = pd.read_csv(path)
	df.replace("?", -99999, inplace=True)
	df.drop(['id'], 1, inplace=True)

	df[['class']] = df[['class']].replace([2, 4], [0,1])
	print(df['class'])
	X = np.array(df.drop(['class'],1))
	y = np.array(df['class'])

	# Splitting the dataset into the Training set and Test set
	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

	# Feature Scaling
	#sc = StandardScaler()
	#X_train = sc.fit_transform(X_train)
	#X_test = sc.transform(X_test)

	# Intinialising the NN
	classifier = Sequential()

	# Adding the input layer and the first Hidden layer 
	classifier.add(Dense(activation="relu", input_dim=9, units=7, kernel_initializer="uniform"))

	# Adding the output layer 
	classifier.add(Dense(activation="sigmoid", input_dim=9, units=1, kernel_initializer="uniform"))

	# Compiling the NN
	classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
	
	# Fitting the ANN to the training set
	classifier.fit(X_train, y_train, batch_size=10, nb_epoch=50)

	# Fitting classifier to the Training set
	# Create your classifier here

	# Predicting the Test set results
	y_pred = classifier.predict_classes(X_test)
	# save the model for later use
	#classifier.save('disease_predict.h5')
	print(y_pred)
	print(y_test)
	
	result2=open("results/resultNN.csv","w")
	result2.write("ID,Predicted Value" + "\n")
	for j in range(len(y_pred)):
	    result2.write(str(j+1) + "," + str(y_pred[j]) + "\n")
	result2.close()
	
	
	mse=mean_squared_error(y_test, y_pred)
	mae=mean_absolute_error(y_test, y_pred)
	r2=r2_score(y_test, y_pred)
	
	
	print("---------------------------------------------------------")
	print("MSE VALUE FOR Neural Network IS %f "  % mse)
	print("MAE VALUE FOR Neural Network IS %f "  % mae)
	print("R-SQUARED VALUE FOR Neural Network IS %f "  % r2)
	rms = np.sqrt(mean_squared_error(y_test, y_pred))
	print("RMSE VALUE FOR Neural Network IS %f "  % rms)
	ac=accuracy_score(y_test,y_pred)
	print ("ACCURACY VALUE Neural Network IS %f" % ac)
	print("---------------------------------------------------------")
	
	msev.append(mse)
	maev.append(mae)
	rsqv.append(r2)
	rmsev.append(rms)
	acyv.append(ac*100)

	model2=svm.LinearSVC()
	model2.fit(X_train, y_train)
	y_pred = model2.predict(X_test)


	result2=open("results/resultSVM.csv","w")
	result2.write("ID,Predicted Value" + "\n")
	for j in range(len(y_pred)):
	    result2.write(str(j+1) + "," + str(y_pred[j]) + "\n")
	result2.close()
	
	mse=mean_squared_error(y_test, y_pred)
	mae=mean_absolute_error(y_test, y_pred)
	r2=r2_score(y_test, y_pred)
	
	
	print("---------------------------------------------------------")
	print("MSE VALUE FOR SVM IS %f "  % mse)
	print("MAE VALUE FOR SVM IS %f "  % mae)
	print("R-SQUARED VALUE FOR SVM IS %f "  % r2)
	rms = np.sqrt(mean_squared_error(y_test, y_pred))
	print("RMSE VALUE FOR SVM IS %f "  % rms)
	ac=accuracy_score(y_test,y_pred)
	print ("ACCURACY VALUE SVM IS %f" % ac)
	print("---------------------------------------------------------")

	msev.append(mse)
	maev.append(mae)
	rsqv.append(r2)
	rmsev.append(rms)
	acyv.append(ac*100)

	model2= DecisionTreeClassifier()
	model2.fit(X_train, y_train)
	y_pred = model2.predict(X_test)


	result2=open("results/resultDT.csv","w")
	result2.write("ID,Predicted Value" + "\n")
	for j in range(len(y_pred)):
	    result2.write(str(j+1) + "," + str(y_pred[j]) + "\n")
	result2.close()
	
	mse=mean_squared_error(y_test, y_pred)
	mae=mean_absolute_error(y_test, y_pred)
	r2=r2_score(y_test, y_pred)
	
	
	print("---------------------------------------------------------")
	print("MSE VALUE FOR Decision Tree IS %f "  % mse)
	print("MAE VALUE FOR Decision Tree IS %f "  % mae)
	print("R-SQUARED VALUE FOR Decision Tree IS %f "  % r2)
	rms = np.sqrt(mean_squared_error(y_test, y_pred))
	print("RMSE VALUE FOR Decision Tree IS %f "  % rms)
	ac=accuracy_score(y_test,y_pred)
	print ("ACCURACY VALUE Decision Tree IS %f" % ac)
	print("---------------------------------------------------------")

	msev.append(mse)
	maev.append(mae)
	rsqv.append(r2)
	rmsev.append(rms)
	acyv.append(ac*100)


	al = ['NN','SVM','Decision Tree']
    
    
	result2=open('results/MSE.csv', 'w')
	result2.write("Algorithm,MSE" + "\n")
	for i in range(0,len(msev)):
	    result2.write(al[i] + "," +str(msev[i]) + "\n")
	result2.close()
    
	colors = ["#1f77b4", "#ff7f0e", "#2ca02c"]
	explode = (0.1, 0, 0, 0, 0)  
       
    
	#Barplot for the dependent variable
	fig = plt.figure(0)
	df =  pd.read_csv('results/MSE.csv')
	acc = df["MSE"]
	alc = df["Algorithm"]
	plt.bar(alc,acc,color=colors)
	plt.xlabel('Algorithm')
	plt.ylabel('MSE')
	plt.title("MSE Value");
	fig.savefig('results/MSE.png')
	plt.pause(5)
	plt.show(block=False)
	plt.close()
	    
    
    
	result2=open('results/MAE.csv', 'w')
	result2.write("Algorithm,MAE" + "\n")
	for i in range(0,len(maev)):
	    result2.write(al[i] + "," +str(maev[i]) + "\n")
	result2.close()
                
	fig = plt.figure(0)            
	df =  pd.read_csv('results/MAE.csv')
	acc = df["MAE"]
	alc = df["Algorithm"]
	plt.bar(alc,acc,align='center', alpha=0.5,color=colors)
	plt.xlabel('Algorithm')
	plt.ylabel('MAE')
	plt.title('MAE Value')
	fig.savefig('results/MAE.png')
	plt.pause(5)
	plt.show(block=False)
	plt.close()
    
	result2=open('results/R-SQUARED.csv', 'w')
	result2.write("Algorithm,R-SQUARED" + "\n")
	for i in range(0,len(rsqv)):
	    result2.write(al[i] + "," +str(rsqv[i]) + "\n")
	result2.close()
            
	fig = plt.figure(0)        
	df =  pd.read_csv('results/R-SQUARED.csv')
	acc = df["R-SQUARED"]
	alc = df["Algorithm"]


	plt.bar(alc,acc,align='center', alpha=0.5,color=colors)
	plt.xlabel('Algorithm')
	plt.ylabel('R-SQUARED')
	plt.title('R-SQUARED Value')
	fig.savefig('results/R-SQUARED.png')
	plt.pause(5)
	plt.show(block=False)
	plt.close()
	    
	result2=open('results/RMSE.csv', 'w')
	result2.write("Algorithm,RMSE" + "\n")
	for i in range(0,len(rmsev)):
	    result2.write(al[i] + "," +str(rmsev[i]) + "\n")
	result2.close()
      
	fig = plt.figure(0)    
	df =  pd.read_csv('results/RMSE.csv')
	acc = df["RMSE"]
	alc = df["Algorithm"]
	plt.bar(alc, acc, align='center', alpha=0.5,color=colors)
	plt.xlabel('Algorithm')
	plt.ylabel('RMSE')
	plt.title('RMSE Value')
	fig.savefig('results/RMSE.png')
	plt.pause(5)
	plt.show(block=False)
	plt.close()
    
	result2=open('results/Accuracy.csv', 'w')
	result2.write("Algorithm,Accuracy" + "\n")
	for i in range(0,len(acyv)):
	    result2.write(al[i] + "," +str(acyv[i]) + "\n")
	result2.close()
    
	fig = plt.figure(0)
	df =  pd.read_csv('results/Accuracy.csv')
	acc = df["Accuracy"]
	alc = df["Algorithm"]
	plt.bar(alc, acc, align='center', alpha=0.5,color=colors)
	plt.xlabel('Algorithm')
	plt.ylabel('Accuracy')
	plt.title('Accuracy Value')
	fig.savefig('results/Accuracy.png')
	plt.pause(5)
	plt.show(block=False)
	plt.close()

    



		
