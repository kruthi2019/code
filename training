#Neural Network
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import keras 
from keras.models import Sequential
from keras.layers import Dense 
from keras.models import load_model
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import r2_score
from sklearn.metrics import roc_curve, auc
from sklearn.metrics import accuracy_score


def process(path):
	# importing the dataset
	df = pd.read_csv(path)
	df.replace("?", -99999, inplace=True)
	df.drop(['id'], 1, inplace=True)

	df[['class']] = df[['class']].replace([2, 4], [0,1])
	print(df['class'])
	X = np.array(df.drop(['class'],1))
	y = np.array(df['class'])

	# Splitting the dataset into the Training set and Test set
	X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

	# Feature Scaling
	#sc = StandardScaler()
	#X_train = sc.fit_transform(X_train)
	#X_test = sc.transform(X_test)

	# Intinialising the NN
	classifier = Sequential()

	# Adding the input layer and the first Hidden layer 
	classifier.add(Dense(activation="relu", input_dim=9, units=7, kernel_initializer="uniform"))

	# Adding the output layer 
	classifier.add(Dense(activation="sigmoid", input_dim=9, units=1, kernel_initializer="uniform"))

	# Compiling the NN
	classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])
	
	# Fitting the ANN to the training set
	classifier.fit(X_train, y_train, batch_size=10, nb_epoch=50)

	# Fitting classifier to the Training set
	# Create your classifier here

	# Predicting the Test set results
	y_pred = classifier.predict_classes(X_test)
	# save the model for later use
	classifier.save('breast-cancer.h5')
	
